// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id         Int      @id @default(autoincrement())
  phone      String?  @unique
  email      String?  @unique
  name       String
  avatar     String?
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  tokens     Token[]
  products   Product[]
  fav        Fav[]
  posts      Post[]
  answers    Answer[]
  wonderings Wondering[]
  writtenReviews Review[] @relation(name: "writtenReviews")
  receivedReviews Review[] @relation(name: "receivedReviews")
  sales Sale[]
  purchases Purchase[]
  records Recorde[]
}

model Token {
  id       Int      @id @default(autoincrement())
  payload  String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   Int
}

model Product {
  id          Int      @id @default(autoincrement())
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  favs        Fav[]
  sales Sale[]
  purchases Purchase[]
  records Recorde[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String   @db.MediumText
  latitude  Float?
  longitude Float?
  answer    Answer[]
  wondering Wondering[]
}

model Answer {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  answer   String   @db.MediumText
}

model Wondering {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
}

model Review {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  review String @db.MediumText
  createBy User @relation(name: "writtenReviews", fields: [createById], references: [id], onDelete: Cascade)
  createById Int
  createFor User @relation(name: "receivedReviews", fields: [createForId], references: [id], onDelete: Cascade)
  createForId Int
  score       Int @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Recorde {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  kind      Kind
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum Kind {
Purchase
Sale
Fav
}
